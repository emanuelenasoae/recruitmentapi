<?xml version="1.0" encoding="utf-8" ?>
<!-- XSD manual extracted from package NLog.Schema: https://www.nuget.org/packages/NLog.Schema-->
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogFile="c:\temp\console-example-internal.log"
      internalLogLevel="Info" >

	<!-- the targets to write to -->
	<targets>
		<!-- write logs to file -->
		<target xsi:type="File" name="all_logs" fileName="${basedir}/logs/${shortdate}.log"
				layout="${longdate}|${level}|${message} |${all-event-properties} ${exception:format=tostring}" />
		<target xsi:type="File" name="important_logs" fileName="${basedir}/important_logs/${shortdate}.log"
				layout="${longdate}|${level}|${message} |${all-event-properties} ${exception:format=tostring}" />
		<target xsi:type="ColoredConsole" name="logconsole"
				layout="${longdate}|${level}|${message} |${all-event-properties} ${exception:format=tostring}" />
	</targets>

	<!-- rules to map from logger name to target
	When using NLog.LogManager.GetCurrentClassLogger() then the logger name will have the format "NameSpace.ClassName". 
	This makes it very convenient to setup filtering for all classes within a namespace:
	<logger name="Name.Space.*" writeTo="target1" />
	
	By using logger-name filtering then one can also redirect output for a single ClassName-logger:
	<logger name="Name.Space.Class1" writeTo="target2" /> ... Add final=true to stop output to target1
	<logger name="Name.Space.*" writeTo="target1" />
	-->
	<rules>
		<logger name="*" minlevel="Trace" writeTo="logconsole" />
		<logger name="*" minlevel="Debug" writeTo="all_logs" />
		<logger name="*" minlevel="Warn" writeTo="important_logs" />
	</rules>
</nlog>